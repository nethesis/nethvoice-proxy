#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import subprocess
# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Chek if a domain is registred
with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-tAU', os.environ["POSTGRES_USER"], os.environ["POSTGRES_DB"]], stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True) as psql:
        print('SELECT COALESCE(json_agg(nethvoice_proxy_routes.*), \'[]\'::json) FROM nethvoice_proxy_routes AND route_type=\'domain\';\n', file=psql.stdin)
        proxy_routes , _ = psql.communicate()
        proxy_routes = json.loads(proxy_routes)

routes = []

for proxy_route in proxy_routes:
    route = {}
    route["domain"] = proxy_route["target"]

    with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-tAU', os.environ["POSTGRES_USER"], os.environ["POSTGRES_DB"]], stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True) as psql:
        print(f'SELECT json_agg(dispatcher.*) FROM dispatcher WHERE setid=\'{proxy_route["setid"]}\';\n', file=psql.stdin)
        address, _ = psql.communicate()
        address = json.loads(address)

    route["address"] = [ { "uri": addres["destination"], "description": addres["description"] }  for addres in address ]
    routes.append(route)
json.dump(routes, fp=sys.stdout)

